// Mocks generated by Mockito 5.4.6 from annotations
// in holefeeder/test/core/services/pending_actions_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:holefeeder/core/services/hive_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService extends _i1.Mock implements _i2.HiveService {
  MockHiveService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> save<T>(String? boxName, String? key, T? value) =>
      (super.noSuchMethod(
            Invocation.method(#save, [boxName, key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<T?> get<T>(String? boxName, String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [boxName, key]),
            returnValue: _i3.Future<T?>.value(),
          )
          as _i3.Future<T?>);

  @override
  _i3.Future<List<T>> getAll<T>(String? boxName) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [boxName]),
            returnValue: _i3.Future<List<T>>.value(<T>[]),
          )
          as _i3.Future<List<T>>);

  @override
  _i3.Future<void> delete<T>(String? boxName, String? key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [boxName, key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearall<T>(String? boxName) =>
      (super.noSuchMethod(
            Invocation.method(#clearall, [boxName]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> exists<T>(String? boxName, String? key) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [boxName, key]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> empty<T>(String? boxName) =>
      (super.noSuchMethod(
            Invocation.method(#empty, [boxName]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
